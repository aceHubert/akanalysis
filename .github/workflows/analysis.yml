name: Stock Market Analysis

on:
  # 定时执行：工作日的北京时间 9:30, 11:30, 13:00, 14:00, 15:00, 16:00
  schedule:
    - cron: '30 1 * * 1-5'  # 9:30 Beijing Time
    - cron: '30 3 * * 1-5'  # 11:30 Beijing Time
    - cron: '0 5 * * 1-5'   # 13:00 Beijing Time
    - cron: '0 6 * * 1-5'   # 14:00 Beijing Time
    - cron: '0 7 * * 1-5'   # 15:00 Beijing Time
    - cron: '0 8 * * 1-5'   # 16:00 Beijing Time

  # 支持手动触发
  workflow_dispatch:
    inputs:
      custom_prompt:
        description: 'Custom analysis prompt (optional)'
        required: false
        type: string

jobs:
  analyze:
    runs-on: ubuntu-latest
    environment: production
    env:
      PYTHONIOENCODING: utf-8
    steps:
      - name: Set beijing timezone
        uses: szenius/set-timezone@v2.0
        with:
          timezoneWindows: "China Standard Time"

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v6
        with:
          node-version-file: .nvmrc

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version


      - name: Get npm global directory
        id: npm-global
        run: echo "dir=$(npm config get prefix)" >> $GITHUB_OUTPUT

      - name: Cache uvx packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            ~/.local/share/uv
          key: ${{ runner.os }}-uvx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-uvx-

      - name: Cache Claude CLI
        id: cache-claude
        uses: actions/cache@v4
        with:
          path: |
            ${{ steps.npm-global.outputs.dir }}
            ~/.claude
            ~/.claude.json
          key: ${{ runner.os }}-claude-cli-npm-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-claude-cli-npm-

      - name: Install Claude CLI
        if: steps.cache-claude.outputs.cache-hit != 'true'
        run: |
          echo "缓存未命中，开始安装 Claude Code..."
          npm install -g @anthropic-ai/claude-code

      - name: Add Claude CLI to PATH
        run: |
          echo "设置 Claude CLI 命令到环境中..."
          echo "${{ steps.npm-global.outputs.dir }}/bin" >> $GITHUB_PATH

      - name: Run market analysis
        run: |
          claude --version
          # Setup MCP configuration
          echo "=== 设置 Claude MCP... ==="
          cp .mcp.example.json .mcp.json

          # List MCP servers
          echo "=== Claude MCP 服务器列表 ==="
          claude mcp list

          # Run analysis
          echo "Custom Prompt: ${CUSTOM_PROMPT:-NONE}"
          echo "执行 AI 分析..."

          if [ -z "$CUSTOM_PROMPT" ]; then
            PROMPT="请使用工具执行以下对股市的分析：

          1. 获取今日上证指数、深证成指、创业板指数的最新数据（收盘价、涨跌幅）
          2. 统计今日涨停股票数量，评估市场情绪及风险
          3. 识别当前最热门的5个板块及其涨跌幅
          4. 基于以上数据进行市场分析

          然后将分析结果推送到飞书机器人，格式如下：

          📊 A股市场分析报告
          ⏰ 时间：{当前时间}

          一、市场概况
          • 上证指数：{指数} ({涨跌幅}%)
          • 深证成指：{指数} ({涨跌幅}%)
          • 创业板指：{指数} ({涨跌幅}%)

          {基于数据的智能分析}

          二、市场情绪
          • 涨停家数：{数量}家
          • 市场活跃度：{活跃/一般/冷清}

          三、热门板块TOP5
          1. {板块名称} {涨跌幅}%
          2. {板块名称} {涨跌幅}%
          3. {板块名称} {涨跌幅}%
          4. {板块名称} {涨跌幅}%
          5. {板块名称} {涨跌幅}%

          四、市场分析
          {基于数据的智能分析}

          五、投资建议
          {操作建议：基于数据的智能分析包括重点推荐方向、操作建议、风险提醒}

          ---
          💡 本报告由AI自动生成，仅供参考"
          else
            PROMPT="$CUSTOM_PROMPT"
          fi

          claude --dangerously-skip-permissions -p "$PROMPT"
        env:
          # Custom Prompt
          CUSTOM_PROMPT: ${{ inputs.custom_prompt || vars.CUSTOM_PROMPT }}
          # Claude API
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_BASE_URL: ${{ secrets.ANTHROPIC_BASE_URL }}
          ANTHROPIC_AUTH_TOKEN: ${{ secrets.ANTHROPIC_AUTH_TOKEN }}
          ANTHROPIC_MODEL: ${{ secrets.ANTHROPIC_MODEL }}
          ANTHROPIC_SMALL_FAST_MODEL: ${{ secrets.ANTHROPIC_SMALL_FAST_MODEL }}
          # Market Data API
          OKX_BASE_URL: ${{ secrets.OKX_BASE_URL }}
          BINANCE_BASE_URL: ${{ secrets.BINANCE_BASE_URL }}
          # 企业微信群机器人
          WEWORK_BOT_KEY: ${{ secrets.WEWORK_BOT_KEY }}
          # 企业微信应用号
          WEWORK_APP_CORPID: ${{ secrets.WEWORK_APP_CORPID || 0 }}
          WEWORK_APP_SECRET: ${{ secrets.WEWORK_APP_SECRET }}
          WEWORK_APP_AGENTID: ${{ secrets.WEWORK_APP_AGENTID || 0 }}
          WEWORK_APP_TOUSER: ${{ secrets.WEWORK_APP_TOUSER }}
          WEWORK_BASE_URL: ${{ secrets.WEWORK_BASE_URL }}
          # 钉钉群机器人
          DINGTALK_BOT_KEY: ${{ secrets.DINGTALK_BOT_KEY }}
          DINGTALK_BASE_URL: ${{ secrets.DINGTALK_BASE_URL }}
          # 飞书/Lark群机器人
          FEISHU_BOT_KEY: ${{ secrets.FEISHU_BOT_KEY }}
          FEISHU_BASE_URL: ${{ secrets.FEISHU_BASE_URL }}
          LARK_BOT_KEY: ${{ secrets.LARK_BOT_KEY }}
          LARK_BASE_URL: ${{ secrets.LARK_BASE_URL }}
          # Bark
          BARK_DEVICE_KEY: ${{ secrets.BARK_DEVICE_KEY }}
          BARK_BASE_URL: ${{ secrets.BARK_BASE_URL }}
          # Telegram
          TELEGRAM_DEFAULT_CHAT: ${{ secrets.TELEGRAM_DEFAULT_CHAT }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_BASE_URL: ${{ secrets.TELEGRAM_BASE_URL }}
